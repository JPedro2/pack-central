{{ if and .Values.enabled .Values.blue.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: octane-deployment-blue
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: octane
      slot: blue
  replicas: {{ .Values.blue.replicas | default .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  template:
    metadata:
      labels:
        farm: {{ .Release.Namespace }}
        app: octane
        slot: blue
    spec:
      terminationGracePeriodSeconds: 300
      priorityClassName: high-blue-{{ .Release.Namespace }}
      containers:
      - name: octane-blue
        image: {{ .Values.blue.image }}
        resources:
          limits:
            cpu: {{ add .Values.cpuRequest .Values.cpuLimitAddition }}m
            memory: {{ add .Values.memRequest .Values.memLimitAddition }}M
          requests:
            cpu: {{ .Values.cpuRequest }}m
            memory: {{ .Values.memRequest }}M
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
{{- if .Values.enableDebug }}
        - name: debug
          containerPort: {{ .Values.debugPort }}
{{- end }}
        lifecycle:
{{- if eq "blue" "red" }}
          postStart:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  status="";
                  timeout=300;
                  while [ -z "$status" ] && [ $timeout -gt 0 ]; do
                    status=$(curl -s -k --write-out %{http_code} https://localhost:8443/admin/server/status --noproxy localhost |grep 200);
                    timeout=$(( $timeout - 10 ));
                    sleep 10;
                  done;
                  curl -v -k -sS -XPOST -H "Content-Type: application/json" -c /opt/octane/cookies.txt -d '{"user":"{{ .Values.siteAdminstratorUser }}","password":"{{ .Values.siteAdminstratorPassword }}"}' https://localhost:8443/authentication/sign_in;
                  curl -v -k -sS -XPUT  -H "Content-Type: application/json" -H "Accept: application/json" -H "HPECLIENTTYPE: HPE_MQM_UI" -b /opt/octane/cookies.txt -d '{"data":[{"role":"WORKER"}]}' https://localhost:8443/admin/servers?query=\"name=\'https://${POD_NAME}:8443\'\"
{{- end }}
          preStop:
            exec:
              command: ["/bin/sh","-c","runuser -m -u octane /opt/octane/wrapper/HPALM stop"]
        volumeMounts:
        - mountPath: "/opt/octane/secrets"
          name: secret-emptydir
        - mountPath: "/opt/octane/repo"
          name: octane-nfs
{{- if .Values.setEfsSubPath }}
          subPath: {{ .Release.Name }}/repo
{{- else }}
          subPath: repo
{{- end }}
        - mountPath: "/logs"
{{- if .Values.hasLogEfs }}
          name: octane-nfs-log
{{- else }}
          name: octane-nfs
{{- end }}
{{- if .Values.setEfsSubPath }}
          subPath: {{ .Release.Name }}/logs
{{- else }}
          subPath: ""
{{- end }}
{{- if .Values.setXPack }}
        - mountPath: "/opt/octane/certs"
          name: xpack-cert
          readOnly: true
{{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-octane-configmap
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG_FOLDER
          value: /logs/$(POD_NAME)
        livenessProbe:
          httpGet:
            path: {{ if eq .Values.pathContext "/" }}{{ else }}{{ .Values.pathContext }}{{ end }}/admin/server/version
{{- if .Values.global.isNginx }}
            port: 8080
            scheme: "HTTP"
{{- else }}
            port: 8443
            scheme: "HTTPS"
{{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
{{- if .Values.enableDebug }}
          failureThreshold: 50000
{{- else }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
{{- end }}
        readinessProbe:
          exec:
{{- if .Values.global.isNginx }}
            command: [ 'bash', '-c', 'curl -s -k --write-out %{http_code} http://localhost:8080{{ if eq .Values.pathContext "/" }}{{ else }}{{ .Values.pathContext }}{{ end }}/admin/server/version --noproxy localhost |grep 200 || exit 1']
{{- else }}
            command: ['bash', '-c', 'curl -s -k --write-out %{http_code} https://localhost:8443/admin/server/version --noproxy localhost |grep 200 || exit 1']
{{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
      initContainers:
      - name: oracle-listener
        image: {{ .Values.alpineImage }}
        command: ['sh', '-c', "for i in $(seq 1 200); do nc -z -w3 {{ .Values.db.server.name }} {{ .Values.db.server.port }} && exit 0 || sleep 3; done; exit 1"]
        resources:
          requests:
            cpu: {{ .Values.initCpuSize }}m
            memory: {{ .Values.initHeapSize }}M
          limits:
            cpu: {{ .Values.initCpuSize }}m
            memory: {{ .Values.initHeapSize }}M
      - name: elasticsearch-listener
        image: {{ .Values.alpineImage }}
        command: ['sh', '-c', "for i in $(seq 1 200); do nc -z -w3 {{ .Values.elasticsearch.host }} 9300 && exit 0 || sleep 3; done; exit 1"]
        resources:
          requests:
            cpu: {{ .Values.initCpuSize }}m
            memory: {{ .Values.initHeapSize }}M
          limits:
            cpu: {{ .Values.initCpuSize }}m
            memory: {{ .Values.initHeapSize }}M
      - name: setup-configs
        image: {{ .Values.alpineImage }}
        command: [ 'sh', '-c', "cp /tmp/secretfolder/secret_env_file.properties /tmp/emptyfolder/" ]
        resources:
          requests:
            cpu: {{ .Values.initCpuSize }}m
            memory: {{ .Values.initHeapSize }}M
          limits:
            cpu: {{ .Values.initCpuSize }}m
            memory: {{ .Values.initHeapSize }}M
        volumeMounts:
        - mountPath: /tmp/secretfolder/
          name: octane-secrets
        - mountPath: /tmp/emptyfolder/
          name: secret-emptydir
      imagePullSecrets:
      - name: regsecret
      volumes:
      - name: octane-nfs
        persistentVolumeClaim:
          claimName: octane-claim
      - name: octane-secrets
        secret:
          secretName: {{ .Release.Name }}-octane-secrets
          items:
          - key: "secret_env_file.properties"
            path: "secret_env_file.properties"
      - name: secret-emptydir
        emptyDir: { }
{{- if .Values.hasLogEfs }}
      - name: octane-nfs-log
        persistentVolumeClaim:
          claimName: octane-claim-log
{{- end }}
{{- if .Values.setXPack }}
      - name: xpack-cert
        secret:
          secretName: elastic-xpack-secret
{{- end }}

{{ end }}